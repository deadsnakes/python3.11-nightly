parameters:
  BuildToPublish: ''

jobs:
- job: Publish_Python
  displayName: Publish python.org packages
  condition: and(succeeded(), eq(variables['DoMSI'], 'true'), eq(variables['DoEmbed'], 'true'), ne(variables['SkipPythonOrgPublish'], 'true'))

  pool:
    #vmImage: windows-2022
    name: 'Windows Release'

  workspace:
    clean: all

  steps:
  - template: ./checkout.yml

  - task: UsePythonVersion@0
    displayName: 'Use Python 3.6 or later'
    inputs:
      versionSpec: '>=3.6'

  - ${{ if parameters.BuildToPublish }}:
    - task: DownloadPipelineArtifact@1
      displayName: 'Download artifact from ${{ parameters.BuildToPublish }}: Doc'
      inputs:
        artifactName: Doc
        targetPath: $(Build.BinariesDirectory)\Doc
        buildType: specific
        project: $(System.TeamProject)
        pipeline: $(Build.DefinitionName)
        buildVersionToDownload: specific
        buildId: ${{ parameters.BuildToPublish }}

    - task: DownloadPipelineArtifact@1
      displayName: 'Download artifact from ${{ parameters.BuildToPublish }}: msi'
      inputs:
        artifactName: msi
        targetPath: $(Build.BinariesDirectory)\msi
        buildType: specific
        project: $(System.TeamProject)
        pipeline: $(Build.DefinitionName)
        buildVersionToDownload: specific
        buildId: ${{ parameters.BuildToPublish }}

    # Note that embed is a 'build' artifact, not a 'pipeline' artifact
    - task: DownloadBuildArtifacts@0
      displayName: 'Download artifact from ${{ parameters.BuildToPublish }}: embed'
      inputs:
        artifactName: embed
        downloadPath: $(Build.BinariesDirectory)
        buildType: specific
        project: $(System.TeamProject)
        pipeline: $(Build.DefinitionName)
        buildVersionToDownload: specific
        buildId: ${{ parameters.BuildToPublish }}

  - ${{ else }}:
    - task: DownloadPipelineArtifact@1
      displayName: 'Download artifact: Doc'
      inputs:
        artifactName: Doc
        targetPath: $(Build.BinariesDirectory)\Doc

    - task: DownloadPipelineArtifact@1
      displayName: 'Download artifact: msi'
      inputs:
        artifactName: msi
        targetPath: $(Build.BinariesDirectory)\msi

    # Note that embed is a 'build' artifact, not a 'pipeline' artifact
    - task: DownloadBuildArtifacts@0
      displayName: 'Download artifact: embed'
      inputs:
        artifactName: embed
        downloadPath: $(Build.BinariesDirectory)


  # Note that ARM64 MSIs are skipped at build when this option is specified
  - powershell: 'gci *embed-arm*.zip | %{ Write-Host "Not publishing: $($_.Name)"; gi $_ } | del'
    displayName: 'Prevent publishing ARM64 packages'
    workingDirectory: '$(Build.BinariesDirectory)\embed'
    condition: and(succeeded(), ne(variables['PublishARM64'], 'true'))


  - template: ./gpg-sign.yml
    parameters:
      GPGKeyFile: 'python-signing.key'
      Files: 'doc\htmlhelp\*.chm, msi\*\*, embed\*.zip'

  - powershell: >
      $(Build.SourcesDirectory)\Tools\msi\uploadrelease.ps1
      -build msi
      -user $(PyDotOrgUsername)
      -server $(PyDotOrgServer)
      -doc_htmlhelp doc\htmlhelp
      -embed embed
      -skippurge
      -skiptest
      -skiphash
    condition: and(succeeded(), eq(variables['SigningCertificate'], variables['__RealSigningCertificate']))
    workingDirectory: $(Build.BinariesDirectory)
    displayName: 'Upload files to python.org'

  - powershell: >
      python
      "$(Build.SourcesDirectory)\Tools\msi\purge.py"
      (gci msi\*\python-*.exe | %{ $_.Name -replace 'python-(.+?)(-|\.exe).+', '$1' } | select -First 1)
    workingDirectory: $(Build.BinariesDirectory)
    condition: and(succeeded(), eq(variables['SigningCertificate'], variables['__RealSigningCertificate']))
    displayName: 'Purge CDN'

  - powershell: |
      $failures = 0
      gci "msi\*\*-webinstall.exe" -File | %{
          $d = mkdir "tests\$($_.BaseName)" -Force
          gci $d -r -File | del
          $ic = copy $_ $d -PassThru
          "Checking layout for $($ic.Name)"
          Start-Process -wait $ic "/passive", "/layout", "$d\layout", "/log", "$d\log\install.log"
          if (-not $?) {
              Write-Error "Failed to validate layout of $($inst.Name)"
              $failures += 1
          }
      }
      if ($failures) {
        Write-Error "Failed to validate $failures installers"
        exit 1
      }
    condition: and(succeeded(), eq(variables['SigningCertificate'], variables['__RealSigningCertificate']))
    workingDirectory: $(Build.BinariesDirectory)
    displayName: 'Test layouts'

  - powershell: |
      $hashes = gci doc\htmlhelp\python*.chm, msi\*\*.exe, embed\*.zip | `
          Sort-Object Name | `
          Format-Table Name, @{
            Label="MD5";
            Expression={(Get-FileHash $_ -Algorithm MD5).Hash}
          }, Length -AutoSize | `
          Out-String -Width 4096
      $d = mkdir "$(Build.ArtifactStagingDirectory)\hashes" -Force
      $hashes | Out-File "$d\hashes.txt" -Encoding ascii
      $hashes
    workingDirectory: $(Build.BinariesDirectory)
    displayName: 'Generate hashes'

  - powershell: |
      "Copying:"
      (gci msi\*\python*.asc, doc\htmlhelp\*.asc, embed\*.asc).FullName
      $d = mkdir "$(Build.ArtifactStagingDirectory)\hashes" -Force
      move msi\*\python*.asc, doc\htmlhelp\*.asc, embed\*.asc $d -Force
      gci msi -Directory | %{ move "msi\$_\*.asc" (mkdir "$d\$_" -Force) }
    workingDirectory: $(Build.BinariesDirectory)
    displayName: 'Copy GPG signatures for build'

  - task: PublishPipelineArtifact@0
    displayName: 'Publish Artifact: hashes'
    inputs:
      targetPath: '$(Build.ArtifactStagingDirectory)\hashes'
      artifactName: hashes
